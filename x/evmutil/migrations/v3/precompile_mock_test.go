// Code generated by MockGen. DO NOT EDIT.
// Source: precompile.go

// Package v3_test is a generated GoMock package.
package v3_test

import (
	big "math/big"
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/types"
	common "github.com/ethereum/go-ethereum/common"
	statedb "github.com/evmos/ethermint/x/evm/statedb"
	gomock "github.com/golang/mock/gomock"
)

// MockEvmKeeper is a mock of EvmKeeper interface.
type MockEvmKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockEvmKeeperMockRecorder
}

// MockEvmKeeperMockRecorder is the mock recorder for MockEvmKeeper.
type MockEvmKeeperMockRecorder struct {
	mock *MockEvmKeeper
}

// NewMockEvmKeeper creates a new mock instance.
func NewMockEvmKeeper(ctrl *gomock.Controller) *MockEvmKeeper {
	mock := &MockEvmKeeper{ctrl: ctrl}
	mock.recorder = &MockEvmKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvmKeeper) EXPECT() *MockEvmKeeperMockRecorder {
	return m.recorder
}

// DeleteAccount mocks base method.
func (m *MockEvmKeeper) DeleteAccount(ctx types.Context, addr common.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", ctx, addr)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockEvmKeeperMockRecorder) DeleteAccount(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockEvmKeeper)(nil).DeleteAccount), ctx, addr)
}

// ForEachStorage mocks base method.
func (m *MockEvmKeeper) ForEachStorage(ctx types.Context, addr common.Address, cb func(common.Hash, common.Hash) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForEachStorage", ctx, addr, cb)
}

// ForEachStorage indicates an expected call of ForEachStorage.
func (mr *MockEvmKeeperMockRecorder) ForEachStorage(ctx, addr, cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForEachStorage", reflect.TypeOf((*MockEvmKeeper)(nil).ForEachStorage), ctx, addr, cb)
}

// GetAccount mocks base method.
func (m *MockEvmKeeper) GetAccount(ctx types.Context, addr common.Address) *statedb.Account {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, addr)
	ret0, _ := ret[0].(*statedb.Account)
	return ret0
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockEvmKeeperMockRecorder) GetAccount(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockEvmKeeper)(nil).GetAccount), ctx, addr)
}

// GetCode mocks base method.
func (m *MockEvmKeeper) GetCode(ctx types.Context, codeHash common.Hash) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", ctx, codeHash)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetCode indicates an expected call of GetCode.
func (mr *MockEvmKeeperMockRecorder) GetCode(ctx, codeHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockEvmKeeper)(nil).GetCode), ctx, codeHash)
}

// GetState mocks base method.
func (m *MockEvmKeeper) GetState(ctx types.Context, addr common.Address, key common.Hash) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", ctx, addr, key)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetState indicates an expected call of GetState.
func (mr *MockEvmKeeperMockRecorder) GetState(ctx, addr, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockEvmKeeper)(nil).GetState), ctx, addr, key)
}

// SetAccount mocks base method.
func (m *MockEvmKeeper) SetAccount(ctx types.Context, addr common.Address, account statedb.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccount", ctx, addr, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAccount indicates an expected call of SetAccount.
func (mr *MockEvmKeeperMockRecorder) SetAccount(ctx, addr, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccount", reflect.TypeOf((*MockEvmKeeper)(nil).SetAccount), ctx, addr, account)
}

// SetBalance mocks base method.
func (m *MockEvmKeeper) SetBalance(ctx types.Context, addr common.Address, amount *big.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBalance", ctx, addr, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBalance indicates an expected call of SetBalance.
func (mr *MockEvmKeeperMockRecorder) SetBalance(ctx, addr, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBalance", reflect.TypeOf((*MockEvmKeeper)(nil).SetBalance), ctx, addr, amount)
}

// SetCode mocks base method.
func (m *MockEvmKeeper) SetCode(ctx types.Context, codeHash, code []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCode", ctx, codeHash, code)
}

// SetCode indicates an expected call of SetCode.
func (mr *MockEvmKeeperMockRecorder) SetCode(ctx, codeHash, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCode", reflect.TypeOf((*MockEvmKeeper)(nil).SetCode), ctx, codeHash, code)
}

// SetState mocks base method.
func (m *MockEvmKeeper) SetState(ctx types.Context, addr common.Address, key common.Hash, value []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetState", ctx, addr, key, value)
}

// SetState indicates an expected call of SetState.
func (mr *MockEvmKeeperMockRecorder) SetState(ctx, addr, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockEvmKeeper)(nil).SetState), ctx, addr, key, value)
}
