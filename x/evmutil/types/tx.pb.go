// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kava/evmutil/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgConvertCoinToERC20 defines a conversion from sdk.Coin to Kava ERC20.
type MsgConvertCoinToERC20 struct {
	// Kava bech32 address initiating the conversion.
	Initiator string `protobuf:"bytes,1,opt,name=initiator,proto3" json:"initiator,omitempty"`
	// EVM 0x hex address that will receive the converted Kava ERC20 tokens.
	Receiver string `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// Amount is the sdk.Coin amount to convert.
	Amount *types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *MsgConvertCoinToERC20) Reset()         { *m = MsgConvertCoinToERC20{} }
func (m *MsgConvertCoinToERC20) String() string { return proto.CompactTextString(m) }
func (*MsgConvertCoinToERC20) ProtoMessage()    {}
func (*MsgConvertCoinToERC20) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e82783c6c58f89c, []int{0}
}
func (m *MsgConvertCoinToERC20) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConvertCoinToERC20) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConvertCoinToERC20.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConvertCoinToERC20) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConvertCoinToERC20.Merge(m, src)
}
func (m *MsgConvertCoinToERC20) XXX_Size() int {
	return m.Size()
}
func (m *MsgConvertCoinToERC20) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConvertCoinToERC20.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConvertCoinToERC20 proto.InternalMessageInfo

func (m *MsgConvertCoinToERC20) GetInitiator() string {
	if m != nil {
		return m.Initiator
	}
	return ""
}

func (m *MsgConvertCoinToERC20) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *MsgConvertCoinToERC20) GetAmount() *types.Coin {
	if m != nil {
		return m.Amount
	}
	return nil
}

// MsgConvertCoinToERC20Response defines the response value from Msg/ConvertCoinToERC20.
type MsgConvertCoinToERC20Response struct {
}

func (m *MsgConvertCoinToERC20Response) Reset()         { *m = MsgConvertCoinToERC20Response{} }
func (m *MsgConvertCoinToERC20Response) String() string { return proto.CompactTextString(m) }
func (*MsgConvertCoinToERC20Response) ProtoMessage()    {}
func (*MsgConvertCoinToERC20Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e82783c6c58f89c, []int{1}
}
func (m *MsgConvertCoinToERC20Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConvertCoinToERC20Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConvertCoinToERC20Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConvertCoinToERC20Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConvertCoinToERC20Response.Merge(m, src)
}
func (m *MsgConvertCoinToERC20Response) XXX_Size() int {
	return m.Size()
}
func (m *MsgConvertCoinToERC20Response) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConvertCoinToERC20Response.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConvertCoinToERC20Response proto.InternalMessageInfo

// MsgConvertERC20ToCoin defines a conversion from Kava ERC20 to sdk.Coin.
type MsgConvertERC20ToCoin struct {
	// EVM 0x hex address initiating the conversion.
	Initiator string `protobuf:"bytes,1,opt,name=initiator,proto3" json:"initiator,omitempty"`
	// Kava bech32 address that will receive the converted sdk.Coin.
	Receiver string `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// EVM 0x hex address of the ERC20 contract.
	KavaERC20Address string `protobuf:"bytes,3,opt,name=kava_erc20_address,json=kavaErc20Address,proto3" json:"kava_erc20_address,omitempty"`
	// ERC20 token amount to convert.
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *MsgConvertERC20ToCoin) Reset()         { *m = MsgConvertERC20ToCoin{} }
func (m *MsgConvertERC20ToCoin) String() string { return proto.CompactTextString(m) }
func (*MsgConvertERC20ToCoin) ProtoMessage()    {}
func (*MsgConvertERC20ToCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e82783c6c58f89c, []int{2}
}
func (m *MsgConvertERC20ToCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConvertERC20ToCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConvertERC20ToCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConvertERC20ToCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConvertERC20ToCoin.Merge(m, src)
}
func (m *MsgConvertERC20ToCoin) XXX_Size() int {
	return m.Size()
}
func (m *MsgConvertERC20ToCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConvertERC20ToCoin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConvertERC20ToCoin proto.InternalMessageInfo

func (m *MsgConvertERC20ToCoin) GetInitiator() string {
	if m != nil {
		return m.Initiator
	}
	return ""
}

func (m *MsgConvertERC20ToCoin) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *MsgConvertERC20ToCoin) GetKavaERC20Address() string {
	if m != nil {
		return m.KavaERC20Address
	}
	return ""
}

// MsgConvertERC20ToCoinResponse defines the response value from
// Msg/MsgConvertERC20ToCoin.
type MsgConvertERC20ToCoinResponse struct {
}

func (m *MsgConvertERC20ToCoinResponse) Reset()         { *m = MsgConvertERC20ToCoinResponse{} }
func (m *MsgConvertERC20ToCoinResponse) String() string { return proto.CompactTextString(m) }
func (*MsgConvertERC20ToCoinResponse) ProtoMessage()    {}
func (*MsgConvertERC20ToCoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e82783c6c58f89c, []int{3}
}
func (m *MsgConvertERC20ToCoinResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConvertERC20ToCoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConvertERC20ToCoinResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConvertERC20ToCoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConvertERC20ToCoinResponse.Merge(m, src)
}
func (m *MsgConvertERC20ToCoinResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgConvertERC20ToCoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConvertERC20ToCoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConvertERC20ToCoinResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgConvertCoinToERC20)(nil), "kava.evmutil.v1beta1.MsgConvertCoinToERC20")
	proto.RegisterType((*MsgConvertCoinToERC20Response)(nil), "kava.evmutil.v1beta1.MsgConvertCoinToERC20Response")
	proto.RegisterType((*MsgConvertERC20ToCoin)(nil), "kava.evmutil.v1beta1.MsgConvertERC20ToCoin")
	proto.RegisterType((*MsgConvertERC20ToCoinResponse)(nil), "kava.evmutil.v1beta1.MsgConvertERC20ToCoinResponse")
}

func init() { proto.RegisterFile("kava/evmutil/v1beta1/tx.proto", fileDescriptor_6e82783c6c58f89c) }

var fileDescriptor_6e82783c6c58f89c = []byte{
	// 440 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xc1, 0x6a, 0xdb, 0x30,
	0x1c, 0xc6, 0xad, 0x75, 0x94, 0x45, 0xbb, 0x14, 0x91, 0x41, 0x6a, 0x56, 0xb9, 0xe4, 0x30, 0x3a,
	0x46, 0xe4, 0xc6, 0xbd, 0xee, 0xb2, 0x84, 0x1e, 0x4a, 0xe9, 0xc5, 0xe4, 0xb4, 0x4b, 0x90, 0x1d,
	0xe1, 0x89, 0xd6, 0x52, 0xb0, 0x14, 0xd3, 0xdd, 0xf7, 0x00, 0x7b, 0x8c, 0x3d, 0xc0, 0x1e, 0xa2,
	0xc7, 0xb2, 0xd3, 0xd8, 0x21, 0x74, 0xce, 0x71, 0xe7, 0xdd, 0x87, 0x64, 0xc5, 0xf3, 0xc0, 0x10,
	0x46, 0x4f, 0x96, 0xf4, 0xfb, 0xe4, 0xef, 0xff, 0xff, 0x24, 0xc1, 0xa3, 0x6b, 0x5a, 0xd2, 0x90,
	0x95, 0xf9, 0x4a, 0xf3, 0x9b, 0xb0, 0x1c, 0x27, 0x4c, 0xd3, 0x71, 0xa8, 0x6f, 0xc9, 0xb2, 0x90,
	0x5a, 0xa2, 0xbe, 0xc1, 0xc4, 0x61, 0xe2, 0xb0, 0xdf, 0xcf, 0x64, 0x26, 0xad, 0x20, 0x34, 0xa3,
	0x5a, 0xeb, 0xe3, 0x54, 0xaa, 0x5c, 0xaa, 0x30, 0xa1, 0x8a, 0x35, 0x7f, 0x4a, 0x25, 0x17, 0x8e,
	0x1f, 0xd6, 0x7c, 0x5e, 0x6f, 0xac, 0x27, 0x35, 0x1a, 0x7e, 0x02, 0xf0, 0xc5, 0x95, 0xca, 0xa6,
	0x52, 0x94, 0xac, 0xd0, 0x53, 0xc9, 0xc5, 0x4c, 0x9e, 0xc7, 0xd3, 0xe8, 0x14, 0xbd, 0x84, 0x3d,
	0x2e, 0xb8, 0xe6, 0x54, 0xcb, 0x62, 0x00, 0x8e, 0xc1, 0x49, 0x2f, 0xfe, 0xbb, 0x80, 0x7c, 0xf8,
	0xac, 0x60, 0x29, 0xe3, 0x25, 0x2b, 0x06, 0x4f, 0x2c, 0x6c, 0xe6, 0x68, 0x0c, 0xf7, 0x69, 0x2e,
	0x57, 0x42, 0x0f, 0xf6, 0x8e, 0xc1, 0xc9, 0xf3, 0xe8, 0x90, 0x38, 0x4b, 0x53, 0xdf, 0xb6, 0x15,
	0x62, 0xbc, 0x62, 0x27, 0x1c, 0x06, 0xf0, 0xa8, 0xb3, 0x8a, 0x98, 0xa9, 0xa5, 0x14, 0x8a, 0x0d,
	0x7f, 0xfd, 0x53, 0xa7, 0x65, 0x33, 0x69, 0x84, 0x8f, 0xa8, 0x73, 0x02, 0x91, 0x09, 0x79, 0xce,
	0x8a, 0x34, 0x3a, 0x9d, 0xd3, 0xc5, 0xa2, 0x60, 0x4a, 0xd9, 0x9a, 0x7b, 0x93, 0x7e, 0xb5, 0x0e,
	0x0e, 0x2e, 0x69, 0x49, 0xad, 0xd5, 0xbb, 0x9a, 0xc5, 0x07, 0x46, 0x7f, 0x6e, 0xe4, 0x6e, 0x05,
	0xcd, 0x9a, 0x5e, 0x9f, 0xda, 0x7d, 0x6f, 0xef, 0xd6, 0x81, 0xf7, 0x63, 0x1d, 0xbc, 0xca, 0xb8,
	0xfe, 0xb0, 0x4a, 0x48, 0x2a, 0x73, 0x17, 0xb8, 0xfb, 0x8c, 0xd4, 0xe2, 0x3a, 0xd4, 0x1f, 0x97,
	0x4c, 0x91, 0x0b, 0xa1, 0xbf, 0x7d, 0x1d, 0x41, 0x17, 0xce, 0x85, 0xd0, 0xdd, 0x71, 0xb4, 0x9a,
	0xdd, 0xc6, 0x11, 0xfd, 0x06, 0x70, 0xef, 0x4a, 0x65, 0xa8, 0x84, 0xa8, 0xe3, 0xe8, 0xde, 0x90,
	0xae, 0xcb, 0x43, 0x3a, 0x13, 0xf6, 0xcf, 0xfe, 0x43, 0xbc, 0xf5, 0x6f, 0xf9, 0xb6, 0x8f, 0x62,
	0xa7, 0x6f, 0x4b, 0xbc, 0xdb, 0xb7, 0xa3, 0xef, 0xc9, 0xe5, 0xc3, 0x4f, 0x0c, 0xbe, 0x54, 0x18,
	0xdc, 0x55, 0x18, 0xdc, 0x57, 0x18, 0x3c, 0x54, 0x18, 0x7c, 0xde, 0x60, 0xef, 0x7e, 0x83, 0xbd,
	0xef, 0x1b, 0xec, 0xbd, 0x7f, 0xdd, 0x0a, 0xde, 0x18, 0x8c, 0x6e, 0x68, 0xa2, 0xec, 0x28, 0xbc,
	0x6d, 0x5e, 0x9b, 0xcd, 0x3f, 0xd9, 0xb7, 0x4f, 0xe0, 0xec, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x37, 0xfb, 0xf8, 0xa4, 0x8a, 0x03, 0x00, 0x00,
}

func (this *MsgConvertCoinToERC20) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MsgConvertCoinToERC20)
	if !ok {
		that2, ok := that.(MsgConvertCoinToERC20)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MsgConvertCoinToERC20")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MsgConvertCoinToERC20 but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MsgConvertCoinToERC20 but is not nil && this == nil")
	}
	if this.Initiator != that1.Initiator {
		return fmt.Errorf("Initiator this(%v) Not Equal that(%v)", this.Initiator, that1.Initiator)
	}
	if this.Receiver != that1.Receiver {
		return fmt.Errorf("Receiver this(%v) Not Equal that(%v)", this.Receiver, that1.Receiver)
	}
	if !this.Amount.Equal(that1.Amount) {
		return fmt.Errorf("Amount this(%v) Not Equal that(%v)", this.Amount, that1.Amount)
	}
	return nil
}
func (this *MsgConvertCoinToERC20) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgConvertCoinToERC20)
	if !ok {
		that2, ok := that.(MsgConvertCoinToERC20)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Initiator != that1.Initiator {
		return false
	}
	if this.Receiver != that1.Receiver {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	return true
}
func (this *MsgConvertCoinToERC20Response) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MsgConvertCoinToERC20Response)
	if !ok {
		that2, ok := that.(MsgConvertCoinToERC20Response)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MsgConvertCoinToERC20Response")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MsgConvertCoinToERC20Response but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MsgConvertCoinToERC20Response but is not nil && this == nil")
	}
	return nil
}
func (this *MsgConvertCoinToERC20Response) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgConvertCoinToERC20Response)
	if !ok {
		that2, ok := that.(MsgConvertCoinToERC20Response)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgConvertERC20ToCoin) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MsgConvertERC20ToCoin)
	if !ok {
		that2, ok := that.(MsgConvertERC20ToCoin)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MsgConvertERC20ToCoin")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MsgConvertERC20ToCoin but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MsgConvertERC20ToCoin but is not nil && this == nil")
	}
	if this.Initiator != that1.Initiator {
		return fmt.Errorf("Initiator this(%v) Not Equal that(%v)", this.Initiator, that1.Initiator)
	}
	if this.Receiver != that1.Receiver {
		return fmt.Errorf("Receiver this(%v) Not Equal that(%v)", this.Receiver, that1.Receiver)
	}
	if this.KavaERC20Address != that1.KavaERC20Address {
		return fmt.Errorf("KavaERC20Address this(%v) Not Equal that(%v)", this.KavaERC20Address, that1.KavaERC20Address)
	}
	if !this.Amount.Equal(that1.Amount) {
		return fmt.Errorf("Amount this(%v) Not Equal that(%v)", this.Amount, that1.Amount)
	}
	return nil
}
func (this *MsgConvertERC20ToCoin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgConvertERC20ToCoin)
	if !ok {
		that2, ok := that.(MsgConvertERC20ToCoin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Initiator != that1.Initiator {
		return false
	}
	if this.Receiver != that1.Receiver {
		return false
	}
	if this.KavaERC20Address != that1.KavaERC20Address {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	return true
}
func (this *MsgConvertERC20ToCoinResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MsgConvertERC20ToCoinResponse)
	if !ok {
		that2, ok := that.(MsgConvertERC20ToCoinResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MsgConvertERC20ToCoinResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MsgConvertERC20ToCoinResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MsgConvertERC20ToCoinResponse but is not nil && this == nil")
	}
	return nil
}
func (this *MsgConvertERC20ToCoinResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgConvertERC20ToCoinResponse)
	if !ok {
		that2, ok := that.(MsgConvertERC20ToCoinResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// ConvertCoinToERC20 defines a method for converting sdk.Coin to Kava ERC20.
	ConvertCoinToERC20(ctx context.Context, in *MsgConvertCoinToERC20, opts ...grpc.CallOption) (*MsgConvertCoinToERC20Response, error)
	// ConvertERC20ToCoin defines a method for converting Kava ERC20 to sdk.Coin.
	ConvertERC20ToCoin(ctx context.Context, in *MsgConvertERC20ToCoin, opts ...grpc.CallOption) (*MsgConvertERC20ToCoinResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) ConvertCoinToERC20(ctx context.Context, in *MsgConvertCoinToERC20, opts ...grpc.CallOption) (*MsgConvertCoinToERC20Response, error) {
	out := new(MsgConvertCoinToERC20Response)
	err := c.cc.Invoke(ctx, "/kava.evmutil.v1beta1.Msg/ConvertCoinToERC20", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ConvertERC20ToCoin(ctx context.Context, in *MsgConvertERC20ToCoin, opts ...grpc.CallOption) (*MsgConvertERC20ToCoinResponse, error) {
	out := new(MsgConvertERC20ToCoinResponse)
	err := c.cc.Invoke(ctx, "/kava.evmutil.v1beta1.Msg/ConvertERC20ToCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// ConvertCoinToERC20 defines a method for converting sdk.Coin to Kava ERC20.
	ConvertCoinToERC20(context.Context, *MsgConvertCoinToERC20) (*MsgConvertCoinToERC20Response, error)
	// ConvertERC20ToCoin defines a method for converting Kava ERC20 to sdk.Coin.
	ConvertERC20ToCoin(context.Context, *MsgConvertERC20ToCoin) (*MsgConvertERC20ToCoinResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) ConvertCoinToERC20(ctx context.Context, req *MsgConvertCoinToERC20) (*MsgConvertCoinToERC20Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertCoinToERC20 not implemented")
}
func (*UnimplementedMsgServer) ConvertERC20ToCoin(ctx context.Context, req *MsgConvertERC20ToCoin) (*MsgConvertERC20ToCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertERC20ToCoin not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_ConvertCoinToERC20_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgConvertCoinToERC20)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ConvertCoinToERC20(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kava.evmutil.v1beta1.Msg/ConvertCoinToERC20",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ConvertCoinToERC20(ctx, req.(*MsgConvertCoinToERC20))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ConvertERC20ToCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgConvertERC20ToCoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ConvertERC20ToCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kava.evmutil.v1beta1.Msg/ConvertERC20ToCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ConvertERC20ToCoin(ctx, req.(*MsgConvertERC20ToCoin))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kava.evmutil.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConvertCoinToERC20",
			Handler:    _Msg_ConvertCoinToERC20_Handler,
		},
		{
			MethodName: "ConvertERC20ToCoin",
			Handler:    _Msg_ConvertERC20ToCoin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kava/evmutil/v1beta1/tx.proto",
}

func (m *MsgConvertCoinToERC20) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConvertCoinToERC20) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConvertCoinToERC20) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != nil {
		{
			size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Initiator) > 0 {
		i -= len(m.Initiator)
		copy(dAtA[i:], m.Initiator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Initiator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgConvertCoinToERC20Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConvertCoinToERC20Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConvertCoinToERC20Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgConvertERC20ToCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConvertERC20ToCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConvertERC20ToCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.KavaERC20Address) > 0 {
		i -= len(m.KavaERC20Address)
		copy(dAtA[i:], m.KavaERC20Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.KavaERC20Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Initiator) > 0 {
		i -= len(m.Initiator)
		copy(dAtA[i:], m.Initiator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Initiator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgConvertERC20ToCoinResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConvertERC20ToCoinResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConvertERC20ToCoinResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgConvertCoinToERC20) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Initiator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgConvertCoinToERC20Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgConvertERC20ToCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Initiator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.KavaERC20Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgConvertERC20ToCoinResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgConvertCoinToERC20) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConvertCoinToERC20: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConvertCoinToERC20: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initiator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Initiator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &types.Coin{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConvertCoinToERC20Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConvertCoinToERC20Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConvertCoinToERC20Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConvertERC20ToCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConvertERC20ToCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConvertERC20ToCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initiator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Initiator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KavaERC20Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KavaERC20Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConvertERC20ToCoinResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConvertERC20ToCoinResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConvertERC20ToCoinResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
