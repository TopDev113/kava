// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kava/earn/v1beta1/strategy.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StrategyType int32

const (
	STRATEGY_TYPE_UNKNOWN      StrategyType = 0
	STRATEGY_TYPE_KAVA_STAKERS StrategyType = 1
	// USDC / BUSD vaults use the same strategy but with the denom set in VaultRecord
	STRATEGY_TYPE_STABLECOIN_STAKERS StrategyType = 2
	STRATEGY_TYPE_KAVA_FOUNDATION    StrategyType = 3
)

var StrategyType_name = map[int32]string{
	0: "STRATEGY_TYPE_UNKNOWN",
	1: "STRATEGY_TYPE_KAVA_STAKERS",
	2: "STRATEGY_TYPE_STABLECOIN_STAKERS",
	3: "STRATEGY_TYPE_KAVA_FOUNDATION",
}

var StrategyType_value = map[string]int32{
	"STRATEGY_TYPE_UNKNOWN":            0,
	"STRATEGY_TYPE_KAVA_STAKERS":       1,
	"STRATEGY_TYPE_STABLECOIN_STAKERS": 2,
	"STRATEGY_TYPE_KAVA_FOUNDATION":    3,
}

func (x StrategyType) String() string {
	return proto.EnumName(StrategyType_name, int32(x))
}

func (StrategyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_257c4968dd48fa09, []int{0}
}

// VaultStrategy is a single strategy for a vault. This contains additional
// information about the strategy such as the status.
type VaultStrategy struct {
	StrategyType StrategyType `protobuf:"varint,1,opt,name=strategy_type,json=strategyType,proto3,enum=kava.earn.v1beta1.StrategyType" json:"strategy_type,omitempty"`
}

func (m *VaultStrategy) Reset()         { *m = VaultStrategy{} }
func (m *VaultStrategy) String() string { return proto.CompactTextString(m) }
func (*VaultStrategy) ProtoMessage()    {}
func (*VaultStrategy) Descriptor() ([]byte, []int) {
	return fileDescriptor_257c4968dd48fa09, []int{0}
}
func (m *VaultStrategy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VaultStrategy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VaultStrategy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VaultStrategy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VaultStrategy.Merge(m, src)
}
func (m *VaultStrategy) XXX_Size() int {
	return m.Size()
}
func (m *VaultStrategy) XXX_DiscardUnknown() {
	xxx_messageInfo_VaultStrategy.DiscardUnknown(m)
}

var xxx_messageInfo_VaultStrategy proto.InternalMessageInfo

func (m *VaultStrategy) GetStrategyType() StrategyType {
	if m != nil {
		return m.StrategyType
	}
	return STRATEGY_TYPE_UNKNOWN
}

func init() {
	proto.RegisterEnum("kava.earn.v1beta1.StrategyType", StrategyType_name, StrategyType_value)
	proto.RegisterType((*VaultStrategy)(nil), "kava.earn.v1beta1.VaultStrategy")
}

func init() { proto.RegisterFile("kava/earn/v1beta1/strategy.proto", fileDescriptor_257c4968dd48fa09) }

var fileDescriptor_257c4968dd48fa09 = []byte{
	// 318 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xc8, 0x4e, 0x2c, 0x4b,
	0xd4, 0x4f, 0x4d, 0x2c, 0xca, 0xd3, 0x2f, 0x33, 0x4c, 0x4a, 0x2d, 0x49, 0x34, 0xd4, 0x2f, 0x2e,
	0x29, 0x4a, 0x2c, 0x49, 0x4d, 0xaf, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x04, 0xa9,
	0xd0, 0x03, 0xa9, 0xd0, 0x83, 0xaa, 0x90, 0x12, 0x49, 0xcf, 0x4f, 0xcf, 0x07, 0xcb, 0xea, 0x83,
	0x58, 0x10, 0x85, 0x52, 0x72, 0xc9, 0xf9, 0xc5, 0xb9, 0xf9, 0xc5, 0xfa, 0x49, 0x89, 0xc5, 0xa9,
	0x70, 0xc3, 0x92, 0xf3, 0x33, 0xf3, 0xa0, 0xf2, 0x92, 0x10, 0xf9, 0x78, 0x88, 0x46, 0x08, 0x07,
	0x22, 0xa5, 0x14, 0xca, 0xc5, 0x1b, 0x96, 0x58, 0x9a, 0x53, 0x12, 0x0c, 0xb5, 0x5a, 0xc8, 0x85,
	0x8b, 0x17, 0xe6, 0x8c, 0xf8, 0x92, 0xca, 0x82, 0x54, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x3e, 0x23,
	0x79, 0x3d, 0x0c, 0xc7, 0xe8, 0xc1, 0xf4, 0x84, 0x54, 0x16, 0xa4, 0x06, 0xf1, 0x14, 0x23, 0xf1,
	0xb4, 0x66, 0x30, 0x72, 0xf1, 0x20, 0x4b, 0x0b, 0x49, 0x72, 0x89, 0x06, 0x87, 0x04, 0x39, 0x86,
	0xb8, 0xba, 0x47, 0xc6, 0x87, 0x44, 0x06, 0xb8, 0xc6, 0x87, 0xfa, 0x79, 0xfb, 0xf9, 0x87, 0xfb,
	0x09, 0x30, 0x08, 0xc9, 0x71, 0x49, 0xa1, 0x4a, 0x79, 0x3b, 0x86, 0x39, 0xc6, 0x07, 0x87, 0x38,
	0x7a, 0xbb, 0x06, 0x05, 0x0b, 0x30, 0x0a, 0xa9, 0x70, 0x29, 0xa0, 0xca, 0x07, 0x87, 0x38, 0x3a,
	0xf9, 0xb8, 0x3a, 0xfb, 0x7b, 0xfa, 0xc1, 0x55, 0x31, 0x09, 0x29, 0x72, 0xc9, 0x62, 0x31, 0xc5,
	0xcd, 0x3f, 0xd4, 0xcf, 0xc5, 0x31, 0xc4, 0xd3, 0xdf, 0x4f, 0x80, 0x59, 0x8a, 0xa5, 0x63, 0xb1,
	0x1c, 0x83, 0x93, 0xc3, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7,
	0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0xa9, 0xa5,
	0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0x83, 0x7c, 0xab, 0x9b, 0x93, 0x98,
	0x54, 0x0c, 0x66, 0xe9, 0x57, 0x40, 0x22, 0x0a, 0x14, 0x20, 0xc5, 0x49, 0x6c, 0xe0, 0xa0, 0x33,
	0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xf5, 0xa2, 0xa1, 0x6c, 0xc2, 0x01, 0x00, 0x00,
}

func (m *VaultStrategy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VaultStrategy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VaultStrategy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StrategyType != 0 {
		i = encodeVarintStrategy(dAtA, i, uint64(m.StrategyType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintStrategy(dAtA []byte, offset int, v uint64) int {
	offset -= sovStrategy(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VaultStrategy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StrategyType != 0 {
		n += 1 + sovStrategy(uint64(m.StrategyType))
	}
	return n
}

func sovStrategy(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStrategy(x uint64) (n int) {
	return sovStrategy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VaultStrategy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStrategy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VaultStrategy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VaultStrategy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrategyType", wireType)
			}
			m.StrategyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrategy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StrategyType |= StrategyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStrategy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStrategy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStrategy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStrategy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStrategy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStrategy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStrategy
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStrategy
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStrategy
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStrategy        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStrategy          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStrategy = fmt.Errorf("proto: unexpected end of group")
)
