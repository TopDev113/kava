// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kava/earn/v1beta1/vault.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StrategyType int32

const (
	StrategyType_KAVA_STAKERS StrategyType = 0
	// USDC / BUSD vaults use the same strategy but with the denom set in VaultRecord
	StrategyType_STABLECOIN_STAKERS StrategyType = 1
	StrategyType_KAVA_FOUNDATION    StrategyType = 2
)

var StrategyType_name = map[int32]string{
	0: "KAVA_STAKERS",
	1: "STABLECOIN_STAKERS",
	2: "KAVA_FOUNDATION",
}

var StrategyType_value = map[string]int32{
	"KAVA_STAKERS":       0,
	"STABLECOIN_STAKERS": 1,
	"KAVA_FOUNDATION":    2,
}

func (x StrategyType) String() string {
	return proto.EnumName(StrategyType_name, int32(x))
}

func (StrategyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_884eb89509fbdc04, []int{0}
}

// AllowedVault defines a vault that is allowed to be created. These can be
// modified via parameter governance.
type AllowedVault struct {
	Denom        string       `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	StrategyType StrategyType `protobuf:"varint,2,opt,name=strategy_type,json=strategyType,proto3,enum=kava.earn.v1beta1.StrategyType" json:"strategy_type,omitempty"`
	// TODO: Do we want a max supply limit?
	MaxSupply uint64 `protobuf:"varint,3,opt,name=max_supply,json=maxSupply,proto3" json:"max_supply,omitempty"`
}

func (m *AllowedVault) Reset()         { *m = AllowedVault{} }
func (m *AllowedVault) String() string { return proto.CompactTextString(m) }
func (*AllowedVault) ProtoMessage()    {}
func (*AllowedVault) Descriptor() ([]byte, []int) {
	return fileDescriptor_884eb89509fbdc04, []int{0}
}
func (m *AllowedVault) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllowedVault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllowedVault.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllowedVault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllowedVault.Merge(m, src)
}
func (m *AllowedVault) XXX_Size() int {
	return m.Size()
}
func (m *AllowedVault) XXX_DiscardUnknown() {
	xxx_messageInfo_AllowedVault.DiscardUnknown(m)
}

var xxx_messageInfo_AllowedVault proto.InternalMessageInfo

func (m *AllowedVault) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *AllowedVault) GetStrategyType() StrategyType {
	if m != nil {
		return m.StrategyType
	}
	return StrategyType_KAVA_STAKERS
}

func (m *AllowedVault) GetMaxSupply() uint64 {
	if m != nil {
		return m.MaxSupply
	}
	return 0
}

type VaultRecord struct {
	Denom       string     `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	TotalSupply types.Coin `protobuf:"bytes,2,opt,name=total_supply,json=totalSupply,proto3" json:"total_supply"`
}

func (m *VaultRecord) Reset()         { *m = VaultRecord{} }
func (m *VaultRecord) String() string { return proto.CompactTextString(m) }
func (*VaultRecord) ProtoMessage()    {}
func (*VaultRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_884eb89509fbdc04, []int{1}
}
func (m *VaultRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VaultRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VaultRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VaultRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VaultRecord.Merge(m, src)
}
func (m *VaultRecord) XXX_Size() int {
	return m.Size()
}
func (m *VaultRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_VaultRecord.DiscardUnknown(m)
}

var xxx_messageInfo_VaultRecord proto.InternalMessageInfo

func (m *VaultRecord) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *VaultRecord) GetTotalSupply() types.Coin {
	if m != nil {
		return m.TotalSupply
	}
	return types.Coin{}
}

// VaultShareRecord defines the shares owned by a depositor and vault.
type VaultShareRecord struct {
	// depositor represents the owner of the shares
	Depositor github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=depositor,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"depositor,omitempty"`
	// amount_supplied represents the total amount a depositor has supplied to the
	// vault. The vault is determined by the coin denom.
	AmountSupplied *types.Coin `protobuf:"bytes,2,opt,name=amount_supplied,json=amountSupplied,proto3" json:"amount_supplied,omitempty"`
}

func (m *VaultShareRecord) Reset()         { *m = VaultShareRecord{} }
func (m *VaultShareRecord) String() string { return proto.CompactTextString(m) }
func (*VaultShareRecord) ProtoMessage()    {}
func (*VaultShareRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_884eb89509fbdc04, []int{2}
}
func (m *VaultShareRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VaultShareRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VaultShareRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VaultShareRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VaultShareRecord.Merge(m, src)
}
func (m *VaultShareRecord) XXX_Size() int {
	return m.Size()
}
func (m *VaultShareRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_VaultShareRecord.DiscardUnknown(m)
}

var xxx_messageInfo_VaultShareRecord proto.InternalMessageInfo

func (m *VaultShareRecord) GetDepositor() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Depositor
	}
	return nil
}

func (m *VaultShareRecord) GetAmountSupplied() *types.Coin {
	if m != nil {
		return m.AmountSupplied
	}
	return nil
}

func init() {
	proto.RegisterEnum("kava.earn.v1beta1.StrategyType", StrategyType_name, StrategyType_value)
	proto.RegisterType((*AllowedVault)(nil), "kava.earn.v1beta1.AllowedVault")
	proto.RegisterType((*VaultRecord)(nil), "kava.earn.v1beta1.VaultRecord")
	proto.RegisterType((*VaultShareRecord)(nil), "kava.earn.v1beta1.VaultShareRecord")
}

func init() { proto.RegisterFile("kava/earn/v1beta1/vault.proto", fileDescriptor_884eb89509fbdc04) }

var fileDescriptor_884eb89509fbdc04 = []byte{
	// 470 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xf6, 0x96, 0x82, 0x94, 0x8d, 0x69, 0xc3, 0xb6, 0x42, 0x69, 0xa5, 0x3a, 0x51, 0x0f, 0x28,
	0x42, 0x8a, 0xad, 0x96, 0x17, 0xc0, 0x6e, 0x8b, 0xa8, 0x0a, 0x89, 0x64, 0x87, 0x1e, 0xb8, 0x44,
	0x6b, 0x7b, 0x71, 0xad, 0xda, 0x5e, 0xcb, 0xbb, 0x0e, 0xf1, 0x23, 0x70, 0xe3, 0x61, 0x38, 0x73,
	0xee, 0xb1, 0xe2, 0xc4, 0x29, 0x42, 0xc9, 0x5b, 0x70, 0x42, 0xfb, 0x43, 0x88, 0x84, 0x10, 0x27,
	0xef, 0xcc, 0x37, 0x33, 0xdf, 0x37, 0x9f, 0x07, 0x1e, 0xdd, 0xe2, 0x19, 0x76, 0x08, 0xae, 0x0a,
	0x67, 0x76, 0x12, 0x12, 0x8e, 0x4f, 0x9c, 0x19, 0xae, 0x33, 0x6e, 0x97, 0x15, 0xe5, 0x14, 0x3d,
	0x11, 0xb0, 0x2d, 0x60, 0x5b, 0xc3, 0x87, 0xfb, 0x09, 0x4d, 0xa8, 0x44, 0x1d, 0xf1, 0x52, 0x85,
	0x87, 0x56, 0x44, 0x59, 0x4e, 0x99, 0x13, 0x62, 0x46, 0xd6, 0x93, 0x22, 0x9a, 0x16, 0x1a, 0x3f,
	0x50, 0xf8, 0x54, 0x35, 0xaa, 0x40, 0x41, 0xc7, 0x9f, 0x00, 0x34, 0xdd, 0x2c, 0xa3, 0x1f, 0x49,
	0x7c, 0x2d, 0xa8, 0xd1, 0x3e, 0x7c, 0x18, 0x93, 0x82, 0xe6, 0x5d, 0xd0, 0x07, 0x83, 0x96, 0xaf,
	0x02, 0x74, 0x0e, 0x1f, 0x33, 0x5e, 0x61, 0x4e, 0x92, 0x66, 0xca, 0x9b, 0x92, 0x74, 0xb7, 0xfa,
	0x60, 0xb0, 0x73, 0xda, 0xb3, 0xff, 0x92, 0x68, 0x07, 0xba, 0x6e, 0xd2, 0x94, 0xc4, 0x37, 0xd9,
	0x46, 0x84, 0x8e, 0x20, 0xcc, 0xf1, 0x7c, 0xca, 0xea, 0xb2, 0xcc, 0x9a, 0xee, 0x83, 0x3e, 0x18,
	0x6c, 0xfb, 0xad, 0x1c, 0xcf, 0x03, 0x99, 0x38, 0x4e, 0x60, 0x5b, 0x6a, 0xf0, 0x49, 0x44, 0xab,
	0xf8, 0x1f, 0x4a, 0x3c, 0x68, 0x72, 0xca, 0x71, 0xf6, 0x7b, 0x8a, 0x10, 0xd2, 0x3e, 0x3d, 0xb0,
	0xf5, 0x56, 0xc2, 0x82, 0xb5, 0x94, 0x33, 0x9a, 0x16, 0xde, 0xf6, 0xdd, 0xa2, 0x67, 0xf8, 0x6d,
	0xd9, 0xa4, 0x89, 0xbe, 0x02, 0xd8, 0x91, 0x4c, 0xc1, 0x0d, 0xae, 0x88, 0xa6, 0xfb, 0x00, 0x5b,
	0x31, 0x29, 0x29, 0x4b, 0x39, 0xad, 0x24, 0xa5, 0xe9, 0xbd, 0xfe, 0xb9, 0xe8, 0x0d, 0x93, 0x94,
	0xdf, 0xd4, 0xa1, 0x1d, 0xd1, 0x5c, 0x3b, 0xa7, 0x3f, 0x43, 0x16, 0xdf, 0x3a, 0xc2, 0x0b, 0x66,
	0xbb, 0x51, 0xe4, 0xc6, 0x71, 0x45, 0x18, 0xfb, 0xf6, 0x65, 0xb8, 0xa7, 0x95, 0xe8, 0x8c, 0xd7,
	0x70, 0xc2, 0xfc, 0x3f, 0xa3, 0x91, 0x07, 0x77, 0x71, 0x4e, 0xeb, 0x82, 0xab, 0x0d, 0x52, 0x12,
	0xff, 0x77, 0x07, 0x7f, 0x47, 0x75, 0x04, 0xba, 0xe1, 0xf9, 0x5b, 0x68, 0x6e, 0xda, 0x8c, 0x3a,
	0xd0, 0xbc, 0x72, 0xaf, 0xdd, 0x69, 0x30, 0x71, 0xaf, 0x2e, 0xfc, 0xa0, 0x63, 0xa0, 0xa7, 0x10,
	0x05, 0x13, 0xd7, 0x7b, 0x73, 0x71, 0x36, 0xbe, 0x1c, 0xad, 0xf3, 0x00, 0xed, 0xc1, 0x5d, 0x59,
	0xf9, 0x6a, 0xfc, 0x6e, 0x74, 0xee, 0x4e, 0x2e, 0xc7, 0xa3, 0xce, 0x96, 0xf7, 0xf2, 0x6e, 0x69,
	0x81, 0xfb, 0xa5, 0x05, 0x7e, 0x2c, 0x2d, 0xf0, 0x79, 0x65, 0x19, 0xf7, 0x2b, 0xcb, 0xf8, 0xbe,
	0xb2, 0x8c, 0xf7, 0xcf, 0x36, 0xb6, 0x17, 0xbf, 0x7a, 0x98, 0xe1, 0x90, 0xc9, 0x97, 0x33, 0x57,
	0x87, 0x2b, 0x1d, 0x08, 0x1f, 0xc9, 0x6b, 0x7a, 0xf1, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x7c, 0xcd,
	0xf3, 0x25, 0xd2, 0x02, 0x00, 0x00,
}

func (m *AllowedVault) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllowedVault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllowedVault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxSupply != 0 {
		i = encodeVarintVault(dAtA, i, uint64(m.MaxSupply))
		i--
		dAtA[i] = 0x18
	}
	if m.StrategyType != 0 {
		i = encodeVarintVault(dAtA, i, uint64(m.StrategyType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintVault(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VaultRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VaultRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VaultRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TotalSupply.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintVault(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VaultShareRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VaultShareRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VaultShareRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AmountSupplied != nil {
		{
			size, err := m.AmountSupplied.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVault(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Depositor) > 0 {
		i -= len(m.Depositor)
		copy(dAtA[i:], m.Depositor)
		i = encodeVarintVault(dAtA, i, uint64(len(m.Depositor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVault(dAtA []byte, offset int, v uint64) int {
	offset -= sovVault(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AllowedVault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	if m.StrategyType != 0 {
		n += 1 + sovVault(uint64(m.StrategyType))
	}
	if m.MaxSupply != 0 {
		n += 1 + sovVault(uint64(m.MaxSupply))
	}
	return n
}

func (m *VaultRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = m.TotalSupply.Size()
	n += 1 + l + sovVault(uint64(l))
	return n
}

func (m *VaultShareRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Depositor)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	if m.AmountSupplied != nil {
		l = m.AmountSupplied.Size()
		n += 1 + l + sovVault(uint64(l))
	}
	return n
}

func sovVault(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVault(x uint64) (n int) {
	return sovVault(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AllowedVault) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllowedVault: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllowedVault: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrategyType", wireType)
			}
			m.StrategyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StrategyType |= StrategyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSupply", wireType)
			}
			m.MaxSupply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSupply |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VaultRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VaultRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VaultRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSupply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VaultShareRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VaultShareRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VaultShareRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depositor", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Depositor = append(m.Depositor[:0], dAtA[iNdEx:postIndex]...)
			if m.Depositor == nil {
				m.Depositor = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountSupplied", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AmountSupplied == nil {
				m.AmountSupplied = &types.Coin{}
			}
			if err := m.AmountSupplied.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVault(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVault
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVault
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVault
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVault
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVault
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVault
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVault        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVault          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVault = fmt.Errorf("proto: unexpected end of group")
)
