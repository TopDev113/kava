// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kava/bep3/v1beta1/bep3.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SwapStatus is the status of an AtomicSwap
type SwapStatus int32

const (
	// AtomicSwap is unspecified
	SwapStatus_SWAP_STATUS_UNSPECIFIED SwapStatus = 0
	// AtomicSwap is open
	SwapStatus_SWAP_STATUS_OPEN SwapStatus = 1
	// AtomicSwap is completed
	SwapStatus_SWAP_STATUS_COMPLETED SwapStatus = 2
	// AtomicSwap is expired
	SwapStatus_SWAP_STATUS_EXPIRED SwapStatus = 3
)

var SwapStatus_name = map[int32]string{
	0: "SWAP_STATUS_UNSPECIFIED",
	1: "SWAP_STATUS_OPEN",
	2: "SWAP_STATUS_COMPLETED",
	3: "SWAP_STATUS_EXPIRED",
}

var SwapStatus_value = map[string]int32{
	"SWAP_STATUS_UNSPECIFIED": 0,
	"SWAP_STATUS_OPEN":        1,
	"SWAP_STATUS_COMPLETED":   2,
	"SWAP_STATUS_EXPIRED":     3,
}

func (x SwapStatus) String() string {
	return proto.EnumName(SwapStatus_name, int32(x))
}

func (SwapStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_01a01937d931b013, []int{0}
}

// SwapDirection is the direction of an AtomicSwap
type SwapDirection int32

const (
	// SwapDirection is unspecified or invalid
	SwapDirection_SWAP_DIRECTION_UNSPECIFIED SwapDirection = 0
	// SwapDirection is incoming
	SwapDirection_SWAP_DIRECTION_INCOMING SwapDirection = 1
	// SwapDirection is outgoing
	SwapDirection_SWAP_DIRECTION_OUTGOING SwapDirection = 2
)

var SwapDirection_name = map[int32]string{
	0: "SWAP_DIRECTION_UNSPECIFIED",
	1: "SWAP_DIRECTION_INCOMING",
	2: "SWAP_DIRECTION_OUTGOING",
}

var SwapDirection_value = map[string]int32{
	"SWAP_DIRECTION_UNSPECIFIED": 0,
	"SWAP_DIRECTION_INCOMING":    1,
	"SWAP_DIRECTION_OUTGOING":    2,
}

func (x SwapDirection) String() string {
	return proto.EnumName(SwapDirection_name, int32(x))
}

func (SwapDirection) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_01a01937d931b013, []int{1}
}

// Params defines the parameters for the bep3 module.
type Params struct {
	AssetParams []AssetParam `protobuf:"bytes,1,rep,name=asset_params,json=assetParams,proto3" json:"asset_params" yaml:"asset_params"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_01a01937d931b013, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetAssetParams() []AssetParam {
	if m != nil {
		return m.AssetParams
	}
	return nil
}

// AssetParam defines parameters for each bep3 asset.
type AssetParam struct {
	Denom         string                                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty" yaml:"denom"`
	CoinID        int64                                  `protobuf:"varint,2,opt,name=coin_id,json=coinId,proto3" json:"coin_id,omitempty"`
	SupplyLimit   SupplyLimit                            `protobuf:"bytes,3,opt,name=supply_limit,json=supplyLimit,proto3" json:"supply_limit" yaml:"supply_limit"`
	Active        bool                                   `protobuf:"varint,4,opt,name=active,proto3" json:"active,omitempty" yaml:"active"`
	DeputyAddress string                                 `protobuf:"bytes,5,opt,name=deputy_address,json=deputyAddress,proto3" json:"deputy_address,omitempty" yaml:"deputy_address"`
	FixedFee      github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=fixed_fee,json=fixedFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"fixed_fee" yaml:"fixed_fee"`
	MinSwapAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,7,opt,name=min_swap_amount,json=minSwapAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"min_swap_amount" yaml:"min_swap_amount"`
	MaxSwapAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,8,opt,name=max_swap_amount,json=maxSwapAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"max_swap_amount" yaml:"max_swap_amount"`
	MinBlockLock  uint64                                 `protobuf:"varint,9,opt,name=min_block_lock,json=minBlockLock,proto3" json:"min_block_lock,omitempty" yaml:"min_block_lock"`
	MaxBlockLock  uint64                                 `protobuf:"varint,10,opt,name=max_block_lock,json=maxBlockLock,proto3" json:"max_block_lock,omitempty" yaml:"max_block_lock"`
}

func (m *AssetParam) Reset()      { *m = AssetParam{} }
func (*AssetParam) ProtoMessage() {}
func (*AssetParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_01a01937d931b013, []int{1}
}
func (m *AssetParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetParam.Merge(m, src)
}
func (m *AssetParam) XXX_Size() int {
	return m.Size()
}
func (m *AssetParam) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetParam.DiscardUnknown(m)
}

var xxx_messageInfo_AssetParam proto.InternalMessageInfo

func (m *AssetParam) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *AssetParam) GetCoinID() int64 {
	if m != nil {
		return m.CoinID
	}
	return 0
}

func (m *AssetParam) GetSupplyLimit() SupplyLimit {
	if m != nil {
		return m.SupplyLimit
	}
	return SupplyLimit{}
}

func (m *AssetParam) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *AssetParam) GetDeputyAddress() string {
	if m != nil {
		return m.DeputyAddress
	}
	return ""
}

func (m *AssetParam) GetMinBlockLock() uint64 {
	if m != nil {
		return m.MinBlockLock
	}
	return 0
}

func (m *AssetParam) GetMaxBlockLock() uint64 {
	if m != nil {
		return m.MaxBlockLock
	}
	return 0
}

// SupplyLimit define the absolute and time-based limits for an assets's supply.
type SupplyLimit struct {
	Limit          github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=limit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"limit" yaml:"limit"`
	TimeLimited    bool                                   `protobuf:"varint,2,opt,name=time_limited,json=timeLimited,proto3" json:"time_limited,omitempty" yaml:"time_limited"`
	TimePeriod     time.Duration                          `protobuf:"bytes,3,opt,name=time_period,json=timePeriod,proto3,stdduration" json:"time_period" yaml:"time_period,omitempty"`
	TimeBasedLimit github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=time_based_limit,json=timeBasedLimit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"time_based_limit" yaml:"time_based_limit"`
}

func (m *SupplyLimit) Reset()      { *m = SupplyLimit{} }
func (*SupplyLimit) ProtoMessage() {}
func (*SupplyLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_01a01937d931b013, []int{2}
}
func (m *SupplyLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SupplyLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SupplyLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SupplyLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SupplyLimit.Merge(m, src)
}
func (m *SupplyLimit) XXX_Size() int {
	return m.Size()
}
func (m *SupplyLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_SupplyLimit.DiscardUnknown(m)
}

var xxx_messageInfo_SupplyLimit proto.InternalMessageInfo

func (m *SupplyLimit) GetTimeLimited() bool {
	if m != nil {
		return m.TimeLimited
	}
	return false
}

func (m *SupplyLimit) GetTimePeriod() time.Duration {
	if m != nil {
		return m.TimePeriod
	}
	return 0
}

// Params defines the parameters for the pricefeed module.
type AtomicSwap struct {
	Amount              github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount" yaml:"amount"`
	RandomNumberHash    []byte                                   `protobuf:"bytes,2,opt,name=random_number_hash,json=randomNumberHash,proto3" json:"random_number_hash,omitempty" yaml:"random_number_hash"`
	ExpireHeight        uint64                                   `protobuf:"varint,3,opt,name=expire_height,json=expireHeight,proto3" json:"expire_height,omitempty" yaml:"expire_height"`
	Timestamp           int64                                    `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty" yaml:"timestamp"`
	Sender              string                                   `protobuf:"bytes,5,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	Recipient           string                                   `protobuf:"bytes,6,opt,name=recipient,proto3" json:"recipient,omitempty" yaml:"recipient"`
	SenderOtherChain    string                                   `protobuf:"bytes,7,opt,name=sender_other_chain,json=senderOtherChain,proto3" json:"sender_other_chain,omitempty" yaml:"sender_other_chain"`
	RecipientOtherChain string                                   `protobuf:"bytes,8,opt,name=recipient_other_chain,json=recipientOtherChain,proto3" json:"recipient_other_chain,omitempty" yaml:"recipient_other_chain"`
	ClosedBlock         int64                                    `protobuf:"varint,9,opt,name=closed_block,json=closedBlock,proto3" json:"closed_block,omitempty" yaml:"closed_block"`
	Status              SwapStatus                               `protobuf:"varint,10,opt,name=status,proto3,enum=kava.bep3.v1beta1.SwapStatus" json:"status,omitempty" yaml:"status"`
	CrossChain          bool                                     `protobuf:"varint,11,opt,name=cross_chain,json=crossChain,proto3" json:"cross_chain,omitempty" yaml:"cross_chain"`
	Direction           SwapDirection                            `protobuf:"varint,12,opt,name=direction,proto3,enum=kava.bep3.v1beta1.SwapDirection" json:"direction,omitempty" yaml:"direction"`
}

func (m *AtomicSwap) Reset()      { *m = AtomicSwap{} }
func (*AtomicSwap) ProtoMessage() {}
func (*AtomicSwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_01a01937d931b013, []int{3}
}
func (m *AtomicSwap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AtomicSwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AtomicSwap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AtomicSwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AtomicSwap.Merge(m, src)
}
func (m *AtomicSwap) XXX_Size() int {
	return m.Size()
}
func (m *AtomicSwap) XXX_DiscardUnknown() {
	xxx_messageInfo_AtomicSwap.DiscardUnknown(m)
}

var xxx_messageInfo_AtomicSwap proto.InternalMessageInfo

func (m *AtomicSwap) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *AtomicSwap) GetRandomNumberHash() []byte {
	if m != nil {
		return m.RandomNumberHash
	}
	return nil
}

func (m *AtomicSwap) GetExpireHeight() uint64 {
	if m != nil {
		return m.ExpireHeight
	}
	return 0
}

func (m *AtomicSwap) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *AtomicSwap) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *AtomicSwap) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *AtomicSwap) GetSenderOtherChain() string {
	if m != nil {
		return m.SenderOtherChain
	}
	return ""
}

func (m *AtomicSwap) GetRecipientOtherChain() string {
	if m != nil {
		return m.RecipientOtherChain
	}
	return ""
}

func (m *AtomicSwap) GetClosedBlock() int64 {
	if m != nil {
		return m.ClosedBlock
	}
	return 0
}

func (m *AtomicSwap) GetStatus() SwapStatus {
	if m != nil {
		return m.Status
	}
	return SwapStatus_SWAP_STATUS_UNSPECIFIED
}

func (m *AtomicSwap) GetCrossChain() bool {
	if m != nil {
		return m.CrossChain
	}
	return false
}

func (m *AtomicSwap) GetDirection() SwapDirection {
	if m != nil {
		return m.Direction
	}
	return SwapDirection_SWAP_DIRECTION_UNSPECIFIED
}

// AssetSupply defines information about an asset's supply.
type AssetSupply struct {
	IncomingSupply           github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,1,opt,name=incoming_supply,json=incomingSupply,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"incoming_supply" yaml:"incoming_supply"`
	OutgoingSupply           github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,2,opt,name=outgoing_supply,json=outgoingSupply,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"outgoing_supply" yaml:"outgoing_supply"`
	CurrentSupply            github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,3,opt,name=current_supply,json=currentSupply,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"current_supply" yaml:"current_supply"`
	TimeLimitedCurrentSupply github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,4,opt,name=time_limited_current_supply,json=timeLimitedCurrentSupply,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"time_limited_current_supply" yaml:"time_limited_current_supply"`
	TimeElapsed              time.Duration                           `protobuf:"bytes,5,opt,name=time_elapsed,json=timeElapsed,proto3,stdduration" json:"time_elapsed" yaml:"time_elapsed,omitempty"`
}

func (m *AssetSupply) Reset()      { *m = AssetSupply{} }
func (*AssetSupply) ProtoMessage() {}
func (*AssetSupply) Descriptor() ([]byte, []int) {
	return fileDescriptor_01a01937d931b013, []int{4}
}
func (m *AssetSupply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetSupply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetSupply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetSupply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetSupply.Merge(m, src)
}
func (m *AssetSupply) XXX_Size() int {
	return m.Size()
}
func (m *AssetSupply) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetSupply.DiscardUnknown(m)
}

var xxx_messageInfo_AssetSupply proto.InternalMessageInfo

func (m *AssetSupply) GetTimeElapsed() time.Duration {
	if m != nil {
		return m.TimeElapsed
	}
	return 0
}

func init() {
	proto.RegisterEnum("kava.bep3.v1beta1.SwapStatus", SwapStatus_name, SwapStatus_value)
	proto.RegisterEnum("kava.bep3.v1beta1.SwapDirection", SwapDirection_name, SwapDirection_value)
	proto.RegisterType((*Params)(nil), "kava.bep3.v1beta1.Params")
	proto.RegisterType((*AssetParam)(nil), "kava.bep3.v1beta1.AssetParam")
	proto.RegisterType((*SupplyLimit)(nil), "kava.bep3.v1beta1.SupplyLimit")
	proto.RegisterType((*AtomicSwap)(nil), "kava.bep3.v1beta1.AtomicSwap")
	proto.RegisterType((*AssetSupply)(nil), "kava.bep3.v1beta1.AssetSupply")
}

func init() { proto.RegisterFile("kava/bep3/v1beta1/bep3.proto", fileDescriptor_01a01937d931b013) }

var fileDescriptor_01a01937d931b013 = []byte{
	// 1320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x5d, 0x6f, 0x1a, 0x47,
	0x17, 0xf6, 0x1a, 0x9b, 0xd8, 0x03, 0x26, 0x64, 0xe2, 0xc4, 0x38, 0x1f, 0x2c, 0x9a, 0x57, 0xca,
	0x4b, 0xa2, 0x06, 0x94, 0xe4, 0xa2, 0x92, 0xa5, 0xb6, 0x61, 0x81, 0xc4, 0xa8, 0x8e, 0x41, 0x03,
	0x56, 0xab, 0x4a, 0xed, 0x6a, 0xd9, 0x9d, 0xc0, 0xca, 0xec, 0x87, 0x76, 0x96, 0x04, 0xdf, 0xf5,
	0xba, 0x52, 0xa5, 0x5e, 0xe6, 0xb2, 0xd7, 0xbd, 0xe9, 0xdf, 0xc8, 0x65, 0x2e, 0xab, 0x56, 0x22,
	0x95, 0xf3, 0x0f, 0xe8, 0x1f, 0xa8, 0xe6, 0x03, 0x18, 0xb0, 0x9b, 0xc4, 0xaa, 0x7a, 0x63, 0xef,
	0x9c, 0xe7, 0xcc, 0x73, 0xce, 0xcc, 0x9c, 0xf3, 0x1c, 0x01, 0x6e, 0x1d, 0x5b, 0x2f, 0xac, 0x72,
	0x97, 0x84, 0x8f, 0xca, 0x2f, 0x1e, 0x74, 0x49, 0x6c, 0x3d, 0xe0, 0x8b, 0x52, 0x18, 0x05, 0x71,
	0x00, 0xaf, 0x30, 0xb4, 0xc4, 0x0d, 0x12, 0xbd, 0xb1, 0xdd, 0x0b, 0x7a, 0x01, 0x47, 0xcb, 0xec,
	0x4b, 0x38, 0xde, 0xc8, 0xdb, 0x01, 0xf5, 0x02, 0x5a, 0xee, 0x5a, 0x94, 0xcc, 0x88, 0xec, 0xc0,
	0xf5, 0xa7, 0x78, 0x2f, 0x08, 0x7a, 0x03, 0x52, 0xe6, 0xab, 0xee, 0xf0, 0x79, 0xd9, 0x19, 0x46,
	0x56, 0xec, 0x06, 0x12, 0x47, 0x1e, 0x48, 0xb6, 0xac, 0xc8, 0xf2, 0x28, 0xfc, 0x16, 0xa4, 0x2d,
	0x4a, 0x49, 0x6c, 0x86, 0x7c, 0x9d, 0xd3, 0x0a, 0x89, 0x62, 0xea, 0xe1, 0xed, 0xd2, 0x99, 0x4c,
	0x4a, 0x15, 0xe6, 0xc6, 0x77, 0x19, 0x37, 0x5f, 0x8f, 0xf5, 0x95, 0xc9, 0x58, 0xbf, 0x7a, 0x62,
	0x79, 0x83, 0x3d, 0xa4, 0x12, 0x20, 0x9c, 0xb2, 0x66, 0x8e, 0x74, 0x6f, 0xed, 0xd5, 0xcf, 0xfa,
	0x0a, 0xfa, 0x6b, 0x1d, 0x80, 0xf9, 0x76, 0x78, 0x07, 0xac, 0x3b, 0xc4, 0x0f, 0xbc, 0x9c, 0x56,
	0xd0, 0x8a, 0x9b, 0x46, 0x76, 0x32, 0xd6, 0xd3, 0x82, 0x89, 0x9b, 0x11, 0x16, 0x30, 0xfc, 0x1f,
	0xb8, 0xc4, 0xce, 0x64, 0xba, 0x4e, 0x6e, 0xb5, 0xa0, 0x15, 0x13, 0x06, 0x38, 0x1d, 0xeb, 0xc9,
	0x6a, 0xe0, 0xfa, 0x8d, 0x1a, 0x4e, 0x32, 0xa8, 0xe1, 0xc0, 0xef, 0x40, 0x9a, 0x0e, 0xc3, 0x70,
	0x70, 0x62, 0x0e, 0x5c, 0xcf, 0x8d, 0x73, 0x89, 0x82, 0x56, 0x4c, 0x3d, 0xcc, 0x9f, 0x73, 0x80,
	0x36, 0x77, 0x3b, 0x60, 0x5e, 0xcb, 0x27, 0x50, 0x19, 0x10, 0x4e, 0xd1, 0xb9, 0x27, 0xbc, 0x0b,
	0x92, 0x96, 0x1d, 0xbb, 0x2f, 0x48, 0x6e, 0xad, 0xa0, 0x15, 0x37, 0x8c, 0x2b, 0x93, 0xb1, 0xbe,
	0x25, 0xcf, 0xcd, 0xed, 0x08, 0x4b, 0x07, 0xf8, 0x18, 0x64, 0x1c, 0x12, 0x0e, 0xe3, 0x13, 0xd3,
	0x72, 0x9c, 0x88, 0x50, 0x9a, 0x5b, 0xe7, 0x07, 0xdc, 0x9d, 0x8c, 0xf5, 0x6b, 0xd3, 0x03, 0xaa,
	0x38, 0xc2, 0x5b, 0xc2, 0x50, 0x11, 0x6b, 0x68, 0x82, 0xcd, 0xe7, 0xee, 0x88, 0x38, 0xe6, 0x73,
	0x42, 0x72, 0xc9, 0x82, 0x56, 0x4c, 0x1b, 0x06, 0xcb, 0xf4, 0xf7, 0xb1, 0x7e, 0xa7, 0xe7, 0xc6,
	0xfd, 0x61, 0xb7, 0x64, 0x07, 0x5e, 0x59, 0xbe, 0xbe, 0xf8, 0x77, 0x9f, 0x3a, 0xc7, 0xe5, 0xf8,
	0x24, 0x24, 0xb4, 0xd4, 0xf0, 0xe3, 0xc9, 0x58, 0xcf, 0x8a, 0x50, 0x33, 0x22, 0x84, 0x37, 0xf8,
	0xf7, 0x13, 0x42, 0x60, 0x08, 0x2e, 0x7b, 0xae, 0x6f, 0xd2, 0x97, 0x56, 0x68, 0x5a, 0x5e, 0x30,
	0xf4, 0xe3, 0xdc, 0x25, 0x1e, 0x66, 0xff, 0xc2, 0x61, 0xae, 0x8b, 0x30, 0x4b, 0x74, 0x08, 0x6f,
	0x79, 0xae, 0xdf, 0x7e, 0x69, 0x85, 0x15, 0xbe, 0xe6, 0x11, 0xad, 0xd1, 0x42, 0xc4, 0x8d, 0x7f,
	0x19, 0x71, 0x91, 0x8e, 0x45, 0xb4, 0x46, 0x4a, 0xc4, 0x2f, 0x40, 0x86, 0x25, 0xd5, 0x1d, 0x04,
	0xf6, 0xb1, 0xc9, 0xfe, 0xe4, 0x36, 0x0b, 0x5a, 0x71, 0x4d, 0x7d, 0x86, 0x45, 0x1c, 0xe1, 0xb4,
	0xe7, 0xfa, 0x06, 0xfb, 0x3c, 0x08, 0xec, 0x63, 0x4e, 0x60, 0x8d, 0x54, 0x02, 0x70, 0x86, 0x60,
	0x01, 0x67, 0x04, 0xd6, 0x68, 0x46, 0x20, 0xab, 0xfe, 0xfb, 0x04, 0x48, 0x29, 0x35, 0x07, 0x3b,
	0x60, 0x5d, 0x94, 0xa8, 0xc6, 0xcf, 0xff, 0xf9, 0x85, 0xcf, 0x2f, 0x9b, 0x44, 0x56, 0xa9, 0x20,
	0x83, 0x7b, 0x20, 0x1d, 0xbb, 0x1e, 0x11, 0xb5, 0x4b, 0x44, 0xa7, 0x6c, 0x18, 0x3b, 0xf3, 0xda,
	0x56, 0x51, 0x84, 0x53, 0x6c, 0x79, 0x20, 0x56, 0xd0, 0x01, 0x7c, 0x69, 0x86, 0x24, 0x72, 0x03,
	0x47, 0xb6, 0xce, 0x6e, 0x49, 0x88, 0x47, 0x69, 0x2a, 0x1e, 0xa5, 0x9a, 0x14, 0x0f, 0xa3, 0x28,
	0xbb, 0xe6, 0x96, 0xc2, 0x2c, 0xf6, 0x7e, 0x12, 0x30, 0x46, 0x2f, 0x8c, 0x4f, 0xd0, 0xab, 0xb7,
	0xba, 0x86, 0x01, 0xc3, 0x5a, 0x1c, 0x82, 0x14, 0x64, 0xb9, 0x27, 0x13, 0x2b, 0x47, 0x76, 0xe9,
	0x1a, 0xbf, 0x82, 0xc6, 0x85, 0xaf, 0x60, 0x47, 0x89, 0xac, 0xf0, 0x21, 0x9c, 0x61, 0x26, 0x83,
	0x59, 0xf8, 0xe1, 0xe4, 0x13, 0xbc, 0x4d, 0x02, 0x50, 0x89, 0x03, 0xcf, 0xb5, 0x59, 0x7d, 0xc0,
	0x18, 0x24, 0x65, 0x09, 0x0a, 0x99, 0xdb, 0x2d, 0x89, 0x30, 0x25, 0x46, 0x35, 0xd3, 0x09, 0x26,
	0x30, 0x46, 0x45, 0x1e, 0x75, 0xda, 0xea, 0xa2, 0xd4, 0x7e, 0x79, 0xab, 0x17, 0x3f, 0x22, 0x57,
	0xc6, 0x40, 0xb1, 0x8c, 0x05, 0xbf, 0x04, 0x30, 0xb2, 0x7c, 0x27, 0xf0, 0x4c, 0x7f, 0xe8, 0x75,
	0x49, 0x64, 0xf6, 0x2d, 0xda, 0xe7, 0xef, 0x94, 0x36, 0x6e, 0x4f, 0xc6, 0xfa, 0xae, 0x08, 0x71,
	0xd6, 0x07, 0xe1, 0xac, 0x30, 0x1e, 0x72, 0xdb, 0xbe, 0x45, 0xfb, 0xf0, 0x33, 0xb0, 0x45, 0x46,
	0xa1, 0x1b, 0x11, 0xb3, 0x4f, 0xdc, 0x5e, 0x5f, 0xe8, 0xdd, 0x9a, 0x91, 0x9b, 0x8c, 0xf5, 0x6d,
	0xc1, 0xb3, 0x00, 0x23, 0x9c, 0x16, 0xeb, 0x7d, 0xbe, 0x84, 0x0f, 0xc1, 0x26, 0xbb, 0x28, 0x1a,
	0x5b, 0x5e, 0xc8, 0x1f, 0x21, 0x61, 0x6c, 0xcf, 0x25, 0x63, 0x06, 0x21, 0x3c, 0x77, 0x63, 0x0a,
	0x48, 0x89, 0xef, 0x90, 0x48, 0xca, 0x99, 0xa2, 0x80, 0xc2, 0x8e, 0xb0, 0x74, 0x60, 0xf4, 0x11,
	0xb1, 0xdd, 0xd0, 0x25, 0x7e, 0xcc, 0xf5, 0x6b, 0x53, 0xa5, 0x9f, 0x41, 0x08, 0xcf, 0xdd, 0xd8,
	0xf5, 0x88, 0xdd, 0x66, 0x10, 0xf7, 0x49, 0x64, 0xda, 0x7d, 0xcb, 0xf5, 0xb9, 0x2a, 0x6d, 0xaa,
	0xd7, 0x73, 0xd6, 0x07, 0xe1, 0xac, 0x30, 0x36, 0x99, 0xad, 0xca, 0x4c, 0xb0, 0x03, 0xae, 0xcd,
	0x98, 0x17, 0xf8, 0x36, 0x38, 0x5f, 0x61, 0x5e, 0xbc, 0xe7, 0xba, 0x21, 0x7c, 0x75, 0x66, 0x57,
	0x58, 0xf7, 0x40, 0xda, 0x1e, 0x04, 0xac, 0xda, 0xba, 0x33, 0x3d, 0x49, 0xa8, 0x3d, 0xa6, 0xa2,
	0x08, 0xa7, 0xc4, 0x92, 0xeb, 0x01, 0xdc, 0x07, 0x49, 0x1a, 0x5b, 0xf1, 0x90, 0x72, 0x11, 0xc9,
	0x9c, 0x3b, 0x5a, 0x59, 0x71, 0xb6, 0xb9, 0xd3, 0xc2, 0xe5, 0x72, 0x0b, 0xbb, 0x5c, 0xfe, 0x01,
	0x3f, 0x05, 0x29, 0x3b, 0x0a, 0x28, 0x95, 0x27, 0x4a, 0xf1, 0x46, 0xbf, 0x3e, 0x19, 0xeb, 0x50,
	0x26, 0x31, 0x07, 0x11, 0x06, 0x7c, 0x35, 0xbd, 0x94, 0x4d, 0xc7, 0x8d, 0x88, 0xcd, 0x7a, 0x38,
	0x97, 0xe6, 0x59, 0x14, 0xfe, 0x21, 0x8b, 0xda, 0xd4, 0x4f, 0x7d, 0xb7, 0xd9, 0x66, 0x84, 0xe7,
	0x44, 0xb2, 0xc3, 0xfe, 0x58, 0x07, 0x29, 0x3e, 0xda, 0x85, 0xd2, 0xc1, 0x1f, 0x35, 0x70, 0xd9,
	0xf5, 0xed, 0xc0, 0x73, 0xfd, 0x9e, 0x29, 0xe6, 0x28, 0xd7, 0xbb, 0xf7, 0x36, 0xdb, 0x54, 0x07,
	0xfe, 0xff, 0x91, 0xbd, 0x35, 0x9f, 0x05, 0x4b, 0xa1, 0x10, 0xce, 0x4c, 0x2d, 0x4a, 0x3e, 0xc1,
	0x30, 0xee, 0x05, 0x4a, 0x3e, 0xab, 0xff, 0x5d, 0x3e, 0x4b, 0xa1, 0x10, 0xce, 0x4c, 0x2d, 0x32,
	0x9f, 0x1f, 0x34, 0x90, 0xb1, 0x87, 0x51, 0xc4, 0x0a, 0x4f, 0xa6, 0x93, 0xf8, 0x50, 0x3a, 0xfb,
	0x17, 0x4f, 0x47, 0x8e, 0xa9, 0xc5, 0x48, 0x08, 0x6f, 0x49, 0x83, 0x4c, 0xe6, 0x57, 0x0d, 0xdc,
	0x54, 0xc7, 0x83, 0xb9, 0x94, 0xd9, 0xda, 0x87, 0x32, 0x3b, 0xba, 0x78, 0x66, 0xe8, 0xec, 0x54,
	0x32, 0x97, 0xd3, 0xcc, 0x29, 0x43, 0xaa, 0xba, 0x90, 0x71, 0x4f, 0x4e, 0x3b, 0x32, 0xb0, 0x42,
	0x4a, 0x1c, 0xae, 0x48, 0xef, 0x1d, 0x59, 0x77, 0xa5, 0x8e, 0xdf, 0x56, 0xc2, 0xca, 0xcd, 0xcb,
	0x33, 0x8b, 0xcf, 0xc2, 0xba, 0xc0, 0x44, 0x75, 0xdf, 0xa3, 0x00, 0xcc, 0x7b, 0x13, 0xde, 0x04,
	0x3b, 0xed, 0xaf, 0x2a, 0x2d, 0xb3, 0xdd, 0xa9, 0x74, 0x8e, 0xda, 0xe6, 0xd1, 0x61, 0xbb, 0x55,
	0xaf, 0x36, 0x9e, 0x34, 0xea, 0xb5, 0xec, 0x0a, 0xdc, 0x06, 0x59, 0x15, 0x6c, 0xb6, 0xea, 0x87,
	0x59, 0x0d, 0xee, 0x82, 0x6b, 0xaa, 0xb5, 0xda, 0x7c, 0xd6, 0x3a, 0xa8, 0x77, 0xea, 0xb5, 0xec,
	0x2a, 0xdc, 0x01, 0x57, 0x55, 0xa8, 0xfe, 0x75, 0xab, 0x81, 0xeb, 0xb5, 0x6c, 0xe2, 0x9e, 0x0b,
	0xb6, 0x16, 0x5a, 0x11, 0xe6, 0xc1, 0x0d, 0xee, 0x59, 0x6b, 0xe0, 0x7a, 0xb5, 0xd3, 0x68, 0x1e,
	0x2e, 0x85, 0x9e, 0xe6, 0x35, 0xc7, 0x1b, 0x87, 0xd5, 0xe6, 0xb3, 0xc6, 0xe1, 0xd3, 0xac, 0x76,
	0x0e, 0xd8, 0x3c, 0xea, 0x3c, 0x6d, 0x32, 0x70, 0xd5, 0x78, 0xfc, 0xfa, 0x34, 0xaf, 0xbd, 0x39,
	0xcd, 0x6b, 0x7f, 0x9e, 0xe6, 0xb5, 0x9f, 0xde, 0xe5, 0x57, 0xde, 0xbc, 0xcb, 0xaf, 0xfc, 0xf6,
	0x2e, 0xbf, 0xf2, 0x8d, 0x3a, 0x92, 0x99, 0x54, 0xdc, 0x1f, 0x58, 0x5d, 0xca, 0xbf, 0xca, 0x23,
	0xf1, 0xfb, 0x85, 0xbf, 0x6a, 0x37, 0xc9, 0xaf, 0xfc, 0xd1, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x57, 0xc4, 0xdc, 0x3d, 0xd9, 0x0c, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetParams) > 0 {
		for iNdEx := len(m.AssetParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AssetParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBep3(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AssetParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxBlockLock != 0 {
		i = encodeVarintBep3(dAtA, i, uint64(m.MaxBlockLock))
		i--
		dAtA[i] = 0x50
	}
	if m.MinBlockLock != 0 {
		i = encodeVarintBep3(dAtA, i, uint64(m.MinBlockLock))
		i--
		dAtA[i] = 0x48
	}
	{
		size := m.MaxSwapAmount.Size()
		i -= size
		if _, err := m.MaxSwapAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBep3(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.MinSwapAmount.Size()
		i -= size
		if _, err := m.MinSwapAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBep3(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.FixedFee.Size()
		i -= size
		if _, err := m.FixedFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBep3(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.DeputyAddress) > 0 {
		i -= len(m.DeputyAddress)
		copy(dAtA[i:], m.DeputyAddress)
		i = encodeVarintBep3(dAtA, i, uint64(len(m.DeputyAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.SupplyLimit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBep3(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.CoinID != 0 {
		i = encodeVarintBep3(dAtA, i, uint64(m.CoinID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintBep3(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SupplyLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SupplyLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SupplyLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TimeBasedLimit.Size()
		i -= size
		if _, err := m.TimeBasedLimit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBep3(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	n2, err2 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.TimePeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.TimePeriod):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintBep3(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1a
	if m.TimeLimited {
		i--
		if m.TimeLimited {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.Limit.Size()
		i -= size
		if _, err := m.Limit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBep3(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AtomicSwap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AtomicSwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AtomicSwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Direction != 0 {
		i = encodeVarintBep3(dAtA, i, uint64(m.Direction))
		i--
		dAtA[i] = 0x60
	}
	if m.CrossChain {
		i--
		if m.CrossChain {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.Status != 0 {
		i = encodeVarintBep3(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x50
	}
	if m.ClosedBlock != 0 {
		i = encodeVarintBep3(dAtA, i, uint64(m.ClosedBlock))
		i--
		dAtA[i] = 0x48
	}
	if len(m.RecipientOtherChain) > 0 {
		i -= len(m.RecipientOtherChain)
		copy(dAtA[i:], m.RecipientOtherChain)
		i = encodeVarintBep3(dAtA, i, uint64(len(m.RecipientOtherChain)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SenderOtherChain) > 0 {
		i -= len(m.SenderOtherChain)
		copy(dAtA[i:], m.SenderOtherChain)
		i = encodeVarintBep3(dAtA, i, uint64(len(m.SenderOtherChain)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintBep3(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintBep3(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Timestamp != 0 {
		i = encodeVarintBep3(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x20
	}
	if m.ExpireHeight != 0 {
		i = encodeVarintBep3(dAtA, i, uint64(m.ExpireHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RandomNumberHash) > 0 {
		i -= len(m.RandomNumberHash)
		copy(dAtA[i:], m.RandomNumberHash)
		i = encodeVarintBep3(dAtA, i, uint64(len(m.RandomNumberHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBep3(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AssetSupply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetSupply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetSupply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n3, err3 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.TimeElapsed, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.TimeElapsed):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintBep3(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x2a
	{
		size := m.TimeLimitedCurrentSupply.Size()
		i -= size
		if _, err := m.TimeLimitedCurrentSupply.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBep3(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.CurrentSupply.Size()
		i -= size
		if _, err := m.CurrentSupply.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBep3(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.OutgoingSupply.Size()
		i -= size
		if _, err := m.OutgoingSupply.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBep3(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.IncomingSupply.Size()
		i -= size
		if _, err := m.IncomingSupply.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBep3(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintBep3(dAtA []byte, offset int, v uint64) int {
	offset -= sovBep3(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AssetParams) > 0 {
		for _, e := range m.AssetParams {
			l = e.Size()
			n += 1 + l + sovBep3(uint64(l))
		}
	}
	return n
}

func (m *AssetParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovBep3(uint64(l))
	}
	if m.CoinID != 0 {
		n += 1 + sovBep3(uint64(m.CoinID))
	}
	l = m.SupplyLimit.Size()
	n += 1 + l + sovBep3(uint64(l))
	if m.Active {
		n += 2
	}
	l = len(m.DeputyAddress)
	if l > 0 {
		n += 1 + l + sovBep3(uint64(l))
	}
	l = m.FixedFee.Size()
	n += 1 + l + sovBep3(uint64(l))
	l = m.MinSwapAmount.Size()
	n += 1 + l + sovBep3(uint64(l))
	l = m.MaxSwapAmount.Size()
	n += 1 + l + sovBep3(uint64(l))
	if m.MinBlockLock != 0 {
		n += 1 + sovBep3(uint64(m.MinBlockLock))
	}
	if m.MaxBlockLock != 0 {
		n += 1 + sovBep3(uint64(m.MaxBlockLock))
	}
	return n
}

func (m *SupplyLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Limit.Size()
	n += 1 + l + sovBep3(uint64(l))
	if m.TimeLimited {
		n += 2
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.TimePeriod)
	n += 1 + l + sovBep3(uint64(l))
	l = m.TimeBasedLimit.Size()
	n += 1 + l + sovBep3(uint64(l))
	return n
}

func (m *AtomicSwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovBep3(uint64(l))
		}
	}
	l = len(m.RandomNumberHash)
	if l > 0 {
		n += 1 + l + sovBep3(uint64(l))
	}
	if m.ExpireHeight != 0 {
		n += 1 + sovBep3(uint64(m.ExpireHeight))
	}
	if m.Timestamp != 0 {
		n += 1 + sovBep3(uint64(m.Timestamp))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovBep3(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovBep3(uint64(l))
	}
	l = len(m.SenderOtherChain)
	if l > 0 {
		n += 1 + l + sovBep3(uint64(l))
	}
	l = len(m.RecipientOtherChain)
	if l > 0 {
		n += 1 + l + sovBep3(uint64(l))
	}
	if m.ClosedBlock != 0 {
		n += 1 + sovBep3(uint64(m.ClosedBlock))
	}
	if m.Status != 0 {
		n += 1 + sovBep3(uint64(m.Status))
	}
	if m.CrossChain {
		n += 2
	}
	if m.Direction != 0 {
		n += 1 + sovBep3(uint64(m.Direction))
	}
	return n
}

func (m *AssetSupply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.IncomingSupply.Size()
	n += 1 + l + sovBep3(uint64(l))
	l = m.OutgoingSupply.Size()
	n += 1 + l + sovBep3(uint64(l))
	l = m.CurrentSupply.Size()
	n += 1 + l + sovBep3(uint64(l))
	l = m.TimeLimitedCurrentSupply.Size()
	n += 1 + l + sovBep3(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.TimeElapsed)
	n += 1 + l + sovBep3(uint64(l))
	return n
}

func sovBep3(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBep3(x uint64) (n int) {
	return sovBep3(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBep3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBep3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBep3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBep3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetParams = append(m.AssetParams, AssetParam{})
			if err := m.AssetParams[len(m.AssetParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBep3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBep3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBep3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBep3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBep3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBep3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinID", wireType)
			}
			m.CoinID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBep3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplyLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBep3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBep3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBep3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SupplyLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBep3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeputyAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBep3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBep3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBep3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeputyAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixedFee", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBep3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBep3
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBep3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FixedFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSwapAmount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBep3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBep3
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBep3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinSwapAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSwapAmount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBep3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBep3
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBep3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxSwapAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinBlockLock", wireType)
			}
			m.MinBlockLock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBep3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinBlockLock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBlockLock", wireType)
			}
			m.MaxBlockLock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBep3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxBlockLock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBep3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBep3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SupplyLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBep3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SupplyLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SupplyLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBep3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBep3
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBep3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Limit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeLimited", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBep3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TimeLimited = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimePeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBep3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBep3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBep3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.TimePeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeBasedLimit", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBep3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBep3
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBep3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TimeBasedLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBep3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBep3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AtomicSwap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBep3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AtomicSwap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AtomicSwap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBep3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBep3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBep3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomNumberHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBep3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBep3
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBep3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandomNumberHash = append(m.RandomNumberHash[:0], dAtA[iNdEx:postIndex]...)
			if m.RandomNumberHash == nil {
				m.RandomNumberHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireHeight", wireType)
			}
			m.ExpireHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBep3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBep3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBep3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBep3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBep3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBep3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBep3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBep3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderOtherChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBep3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBep3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBep3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderOtherChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientOtherChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBep3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBep3
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBep3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientOtherChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedBlock", wireType)
			}
			m.ClosedBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBep3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClosedBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBep3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= SwapStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChain", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBep3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CrossChain = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBep3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direction |= SwapDirection(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBep3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBep3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetSupply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBep3
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetSupply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetSupply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncomingSupply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBep3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBep3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBep3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IncomingSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutgoingSupply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBep3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBep3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBep3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutgoingSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentSupply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBep3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBep3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBep3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeLimitedCurrentSupply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBep3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBep3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBep3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TimeLimitedCurrentSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeElapsed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBep3
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBep3
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBep3
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.TimeElapsed, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBep3(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBep3
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBep3(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBep3
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBep3
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBep3
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBep3
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBep3
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBep3
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBep3        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBep3          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBep3 = fmt.Errorf("proto: unexpected end of group")
)
