syntax = "proto3";
package kava.earn.v1beta1;

import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "kava/earn/v1beta1/strategy.proto";
import "kava/earn/v1beta1/vault.proto";

option go_package = "github.com/kava-labs/kava/x/earn/types";

// Msg defines the earn Msg service.
service Msg {
  // Deposit defines a method for depositing assets into a vault
  rpc Deposit(MsgDeposit) returns (MsgDepositResponse);
  // Withdraw defines a method for withdrawing assets into a vault
  rpc Withdraw(MsgWithdraw) returns (MsgWithdrawResponse);
}

// MsgDeposit represents a message for depositing assedts into a vault
message MsgDeposit {
  option (gogoproto.goproto_getters) = false;

  // depositor represents the address to deposit funds from
  string depositor = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // Amount represents the token to deposit. The vault corresponds to the denom
  // of the amount coin.
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false];

  // Strategy is the vault strategy to use.
  StrategyType strategy = 3;
}

// MsgDepositResponse defines the Msg/Deposit response type.
message MsgDepositResponse {
  VaultShare shares = 1 [(gogoproto.nullable) = false];
}

// MsgWithdraw represents a message for withdrawing liquidity from a vault
message MsgWithdraw {
  option (gogoproto.goproto_getters) = false;

  // from represents the address we are withdrawing for
  string from = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // Amount represents the token to withdraw. The vault corresponds to the denom
  // of the amount coin.
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false];

  // Strategy is the vault strategy to use.
  StrategyType strategy = 3;
}

// MsgWithdrawResponse defines the Msg/Withdraw response type.
message MsgWithdrawResponse {
  VaultShare shares = 1 [(gogoproto.nullable) = false];
}
