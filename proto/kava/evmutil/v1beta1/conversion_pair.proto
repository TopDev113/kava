syntax = "proto3";
package kava.evmutil.v1beta1;

import "gogoproto/gogo.proto";

option go_package = "github.com/kava-labs/kava/x/evmutil/types";
option (gogoproto.equal_all) = true;
option (gogoproto.verbose_equal_all) = true;

// ConversionPair defines a Kava ERC20 address and corresponding denom that is
// allowed to be converted between ERC20 and sdk.Coin
message ConversionPair {
  option (gogoproto.goproto_getters) = false;

  // ERC20 address of the token on the Kava EVM
  bytes kava_erc20_address = 1 [
    (gogoproto.customname) = "KavaERC20Address",
    (gogoproto.casttype) = "HexBytes"
  ];

  // Denom of the corresponding sdk.Coin
  string denom = 2;
}

// AllowedCosmosCoinERC20Token defines allowed cosmos-sdk denom & metadata
// for evm token representations of sdk assets.
// NOTE: once evm token contracts are deployed, changes to metadata for a given
// cosmos_denom will not change metadata of deployed contract.
message AllowedCosmosCoinERC20Token {
  option (gogoproto.goproto_getters) = false;

  // Denom of the sdk.Coin
  string cosmos_denom = 1;
  // Name of ERC20 contract
  string name = 2;
  // Symbol of ERC20 contract
  string symbol = 3;
  // Number of decimals ERC20 contract is deployed with.
  uint32 decimals = 4;
}
