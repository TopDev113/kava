syntax = "proto3";
package kava.bep3.v1beta1;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "google/protobuf/duration.proto";

option go_package = "github.com/kava-labs/kava/x/bep3/types";

// Params defines the parameters for the bep3 module.
message Params {
  option (gogoproto.goproto_stringer) = false;

  repeated AssetParam asset_params = 1 [(gogoproto.nullable) = false];
}

// AssetParam defines parameters for each bep3 asset.
message AssetParam {
  option (gogoproto.goproto_stringer) = false;

  string      denom          = 1;
  int64       coin_id        = 2 [(gogoproto.customname) = "CoinID"];
  SupplyLimit supply_limit   = 3 [(gogoproto.nullable) = false];
  bool        active         = 4;
  string      deputy_address = 5;
  bytes fixed_fee = 6 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
  bytes min_swap_amount = 7
      [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
  bytes max_swap_amount = 8
      [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
  uint64 min_block_lock = 9;
  uint64 max_block_lock = 10;
}

// SupplyLimit define the absolute and time-based limits for an assets's supply.
message SupplyLimit {
  option (gogoproto.goproto_stringer) = false;

  bytes limit = 1 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
  bool  time_limited                        = 2;
  google.protobuf.Duration time_period      = 3 [(gogoproto.nullable) = false, (gogoproto.stdduration) = true];
  bytes                    time_based_limit = 4
      [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
}

// SwapStatus is the status of an AtomicSwap
enum SwapStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  // AtomicSwap is unspecified
  SWAP_STATUS_UNSPECIFIED = 0x00;
  // AtomicSwap is open
  SWAP_STATUS_OPEN = 0x01;
  // AtomicSwap is completed
  SWAP_STATUS_COMPLETED = 0x02;
  // AtomicSwap is expired
  SWAP_STATUS_EXPIRED = 0x03;
}

// SwapDirection is the direction of an AtomicSwap
enum SwapDirection {
  option (gogoproto.goproto_enum_prefix) = false;

  // SwapDirection is unspecified or invalid
  SWAP_DIRECTION_UNSPECIFIED = 0x00;
  // SwapDirection is incoming
  SWAP_DIRECTION_INCOMING = 0x01;
  // SwapDirection is outgoing
  SWAP_DIRECTION_OUTGOING = 0x02;
}

// AtomicSwap defines an atomic swap between chains for the pricefeed module.
message AtomicSwap {
  option (gogoproto.goproto_stringer) = false;

  repeated cosmos.base.v1beta1.Coin amount = 1
      [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (gogoproto.nullable) = false];
  bytes         random_number_hash    = 2;
  uint64        expire_height         = 3;
  int64         timestamp             = 4;
  string        sender                = 5;
  string        recipient             = 6;
  string        sender_other_chain    = 7;
  string        recipient_other_chain = 8;
  int64         closed_block          = 9;
  SwapStatus    status                = 10;
  bool          cross_chain           = 11;
  SwapDirection direction             = 12;
}

// AugmentedAtomicSwap defines an AtomicSwap with an ID.
message AugmentedAtomicSwap {
  option (gogoproto.goproto_stringer) = false;

  string     id          = 1 [(gogoproto.customname) = "ID"];
  AtomicSwap atomic_swap = 2 [(gogoproto.nullable) = false];
}

// AssetSupply defines information about an asset's supply.
message AssetSupply {
  option (gogoproto.goproto_stringer) = false;

  cosmos.base.v1beta1.Coin incoming_supply = 1
      [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin", (gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin outgoing_supply = 2
      [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin", (gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin current_supply = 3
      [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin", (gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin time_limited_current_supply = 4
      [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin", (gogoproto.nullable) = false];
  google.protobuf.Duration time_elapsed = 5 [(gogoproto.nullable) = false, (gogoproto.stdduration) = true];
}
