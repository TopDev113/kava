syntax = "proto3";
package kava.bep3.v1beta1;

import "kava/bep3/v1beta1/bep3.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";

option go_package = "github.com/kava-labs/kava/x/bep3/types";

// Query defines the gRPC querier service for bep3 module
service Query {
  // Params queries module params
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/kava/bep3/v1beta1/params";
  }

  // AssetSupply queries info about an asset's supply
  rpc AssetSupply(QueryAssetSupplyRequest) returns (QueryAssetSupplyResponse) {
    option (google.api.http).get = "/kava/bep3/v1beta1/assetsupply/{denom}";
  }

  // AssetSupplies queries a list of asset supplies
  rpc AssetSupplies(QueryAssetSuppliesRequest) returns (QueryAssetSuppliesResponse) {
    option (google.api.http).get = "/kava/bep3/v1beta1/assetsupplies";
  }

  // AtomicSwap queries info about an atomic swap
  rpc AtomicSwap(QueryAtomicSwapRequest) returns (QueryAtomicSwapResponse) {
    option (google.api.http).get = "/kava/bep3/v1beta1/atomicswap/{swap_id}";
  }

  // AtomicSwaps queries a list of atomic swaps
  rpc AtomicSwaps(QueryAtomicSwapsRequest) returns (QueryAtomicSwapsResponse) {
    option (google.api.http).get = "/kava/bep3/v1beta1/atomicswaps";
  }
}

// QueryParamsRequest defines the request type for querying x/bep3 parameters.
message QueryParamsRequest {}

// QueryParamsResponse defines the response type for querying x/bep3 parameters.
message QueryParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryAssetSupplyRequest is the request type for the Query/AssetSupply RPC method.
message QueryAssetSupplyRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string denom = 1;
}

// QueryAssetSupplyResponse is the response type for the Query/AssetSupply RPC method.
message QueryAssetSupplyResponse {
  AssetSupply asset_supply = 1 [(gogoproto.nullable) = false];
}

// QueryAssetSuppliesRequest is the request type for the Query/AssetSupplies RPC method.
message QueryAssetSuppliesRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryAssetSuppliesResponse is the response type for the Query/AssetSupplies RPC method.
message QueryAssetSuppliesResponse {
  repeated AssetSupply asset_supplies = 1 [(gogoproto.nullable) = false];

  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryAtomicSwapRequest is the request type for the Query/AtomicSwap RPC method.
message QueryAtomicSwapRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  bytes swap_id = 1;
}

// QueryAtomicSwapResponse is the response type for the Query/AtomicSwap RPC method.
message QueryAtomicSwapResponse {
  string     id          = 1 [(gogoproto.customname) = "ID"];
  AtomicSwap atomic_swap = 2 [(gogoproto.nullable) = false];
}

// QueryAtomicSwapsRequest is the request type for the Query/AtomicSwaps RPC method.
message QueryAtomicSwapsRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string        involve    = 1;
  uint64        expiration = 2;
  SwapStatus    status     = 3;
  SwapDirection direction  = 4;

  cosmos.base.query.v1beta1.PageRequest pagination = 5;
}

// QueryAtomicSwapsResponse is the response type for the Query/AtomicSwaps RPC method.
message QueryAtomicSwapsResponse {
  repeated AugmentedAtomicSwap atomic_swap = 1 [(gogoproto.nullable) = false];

  cosmos.base.query.v1beta1.PageResponse pagination = 3;
}
