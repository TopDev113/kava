syntax = "proto3";
package kava.earn.v1beta1;

import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "kava/earn/v1beta1/strategy.proto";

option go_package = "github.com/kava-labs/kava/x/router/types";

// Msg defines the router Msg service.
service Msg {
  rpc MintDeposit(MsgMintDeposit) returns (MsgMintDepositResponse);
  rpc DelegateMintDeposit(MsgDelegateMintDeposit) returns (MsgDelegateMintDepositResponse);

  rpc WithdrawBurn(MsgWithdrawBurn) returns (MsgWithdrawBurnResponse);
  rpc WithdrawBurnUndelegate(MsgWithdrawBurnUndelegate) returns (MsgWithdrawBurnUndelegateResponse);
}

message MsgMintDeposit {
  option (gogoproto.goproto_getters) = false;

  // depositor represents the address to deposit funds from
  string depositor = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string validator = 2;
  // Amount represents the token to deposit. The vault corresponds to the denom
  // of the amount coin.
  cosmos.base.v1beta1.Coin amount = 3 [(gogoproto.nullable) = false];

  StrategyType strategy = 4;
}
message MsgMintDepositResponse {}

message MsgDelegateMintDeposit {
  option (gogoproto.goproto_getters) = false;

  // depositor represents the address to deposit funds from
  string depositor = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string validator = 2;
  // Amount represents the token to deposit. The vault corresponds to the denom
  // of the amount coin.
  cosmos.base.v1beta1.Coin amount = 3 [(gogoproto.nullable) = false];

  StrategyType strategy = 4;
}
message MsgDelegateMintDepositResponse {}

message MsgWithdrawBurn {
  option (gogoproto.goproto_getters) = false;

  // depositor represents the address to deposit funds from
  string from = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string validator = 2;
  // Amount represents the token to deposit. The vault corresponds to the denom
  // of the amount coin.
  cosmos.base.v1beta1.Coin amount = 3 [(gogoproto.nullable) = false];

  StrategyType strategy = 4;
}
message MsgWithdrawBurnResponse {}

message MsgWithdrawBurnUndelegate {
  option (gogoproto.goproto_getters) = false;

  // depositor represents the address to deposit funds from
  string from = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string validator = 2;
  // Amount represents the token to deposit. The vault corresponds to the denom
  // of the amount coin.
  cosmos.base.v1beta1.Coin amount = 3 [(gogoproto.nullable) = false];

  StrategyType strategy = 4;
}
message MsgWithdrawBurnUndelegateResponse {}